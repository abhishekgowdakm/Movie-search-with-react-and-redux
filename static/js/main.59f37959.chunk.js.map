{"version":3,"sources":["SerachMovieComponent.js","store/actions/request.js","store/actions/actionTypes.js","App.js","serviceWorker.js","store/reducer/reducer.js","index.js"],"names":["connect","state","res","responce","dispatch","onGet","value","url","axios","get","then","type","request","data","results","catch","err","console","log","actiontypes","props","useState","query","setQuery","getMovie","event","a","preventDefault","Fragment","className","onSubmit","class","name","onChange","target","placeholder","href","length","filter","movie","poster_path","map","key","id","src","alt","title","release_date","vote_count","overview","App","document","SerachMovieComponent","Boolean","window","location","hostname","match","initailState","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8SAoEeA,eAZQ,SAAAC,GACnB,MAAM,CACFC,IAAID,EAAME,aAGO,SAAAC,GACrB,MAAM,CACVC,MAAM,SAACC,GAAD,OAASF,ECrDS,SAACE,GACrB,OAAO,SAAAF,GACH,IAAMG,EAAI,2GAAD,OAA6GD,EAA7G,wBACTE,IAAMC,IAAIF,GACTG,MAAK,SAAAR,GAEFE,EAdS,SAACE,GAClB,MAAO,CACHK,KCJc,WDKdL,MAAOA,GAWMM,CAAQV,EAAIW,KAAKC,aAC3BC,OAAM,SAAAC,GACjBC,QAAQC,IAAIF,OD6CYG,CAAuBb,QAKhCN,EAjEa,SAACoB,GAAQ,MAEVC,mBAAS,IAFC,mBAE1BC,EAF0B,KAEpBC,EAFoB,KAK3BC,EAAQ,uCAAC,WAAMC,GAAN,SAAAC,EAAA,sDACZD,EAAME,iBACRP,EAAMf,MAAMiB,GAFE,2CAAD,sDAiBd,OADHL,QAAQC,IAAIE,EAAMlB,KAEX,kBAAC,IAAM0B,SAAP,KACR,0BAAMC,UAAU,OAAOC,SAAUN,GACjC,yBAAKO,MAAM,aACC,2BAAOA,MAAM,cAAcpB,KAAK,OAAOqB,KAAK,GAAG1B,MAAOgB,EAAOW,SAAU,SAACR,GAAD,OAASF,EAASE,EAAMS,OAAO5B,QAAQ6B,YAAY,sBAC1H,4BAAQJ,MAAM,eAAeK,KAAK,IAAIzB,KAAK,UAC3C,uBAAGoB,MAAM,oBAIrB,yBAAKF,UAAU,cACK,IAAnBT,EAAMlB,IAAImC,OACXjB,EAAMlB,IAAIoC,QAAO,SAAAC,GAAK,OAAEA,EAAMC,eAAaC,KAAI,SAAAF,GAAK,OACpD,yBAAKV,UAAU,QAAQa,IAAKH,EAAMI,IAClC,yBAAKd,UAAU,QAAQe,IAAG,yCAAoCL,EAAMC,aAAeK,IAAG,gBAAWN,EAAMO,SACnG,wBAAIjB,UAAU,gBAAgBU,EAAMO,OACpC,uBAAGjB,UAAU,oBAAb,iBAA+CU,EAAMQ,cACrD,uBAAGlB,UAAU,oBAAb,oBAAkDU,EAAMS,YACxD,uBAAGnB,UAAU,cAAcU,EAAMU,cAE9B,uBAAGpB,UAAU,yBAAb,oD,MG9BQqB,MAXf,WAEE,OADAC,SAASL,MAAM,cAEb,yBAAKjB,UAAU,aACb,wBAAIA,UAAU,SAAd,eACA,kBAACuB,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAa,CACfvD,SAAS,IAkBEwD,EAfD,WAA8B,IAA7B1D,EAA4B,uDAAtByD,EAAaE,EAAS,uCACvC,OAAOA,EAAOjD,MACV,IHRc,WGSV,MAAM,CACFR,SAASyD,EAAOtD,OAGpB,QACI,MAAM,CACJH,SAASF,EAAME,Y,QCL3B0D,EAAMC,YAAYH,EAAQI,YAAgBC,MAEhDC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACjB,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,QAIFhB,SAASiB,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEd1D,OAAM,SAAA2D,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.59f37959.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport * as actiontypes from './store/actions/request';\r\nconst  serachMovieComponent=(props)=>{\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    const [query,setQuery]=useState('');\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n \r\n    const getMovie=async(event)=>{\r\n       event.preventDefault();\r\n     props.onGet(query);\r\n    //  const url= `https://api.themoviedb.org/3/search/movie?api_key=1d547d0f978f704dad5f29a2cd73fe62&language=en-US&query=${query}&inculde_adult=false`;\r\n    //  try{\r\n    //      const res= await fetch(url);\r\n    //      console.log(res);\r\n    //      const data =  await res.json();\r\n    //      console.log(data.results);\r\n    //   setMovie(movie);\r\n \r\n    //  }catch(err){\r\n    //      console.log(err);\r\n    //  }\r\n      \r\n    }\r\n console.log(props.res);\r\n    return (\r\n        <React.Fragment>\r\n<form className=\"form\" onSubmit={getMovie} >\r\n<div class=\"searchBox\">\r\n            <input class=\"searchInput\" type=\"text\" name=\"\" value={query} onChange={(event)=>setQuery(event.target.value)} placeholder=\"i.e Jurassic Park\"/>\r\n            <button class=\"searchButton\" href=\"#\" type=\"submit\">\r\n            <i class=\"fa fa-search\"></i>\r\n            </button>\r\n        </div>\r\n</form>\r\n<div className=\"cards_main\">\r\n{props.res.length!==0 ? \r\nprops.res.filter(movie=>movie.poster_path).map(movie=>(\r\n<div className=\"cards\" key={movie.id}>\r\n<img className=\"image\" src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={`title ${movie.title}`}></img>\r\n    <h3 className=\"main_heading\">{movie.title}</h3>\r\n    <p className=\"main_paragraph_1\">Release Date: {movie.release_date}</p>\r\n    <p className=\"main_paragraph_1\">Positive votes : {movie.vote_count}</p>\r\n    <p className=\"movie_desc\">{movie.overview}</p>\r\n</div>\r\n    )):<p className=\"cards_error_paragraph\" >Please search for new movie/Movie Not found</p>\r\n\r\n\r\n\r\n}\r\n  \r\n</div>\r\n      </React.Fragment>\r\n\r\n    );\r\n}\r\nconst mapStateToProps =state=>{\r\n    return{\r\n        res:state.responce\r\n    }\r\n}\r\nconst mapDispatchToProps=dispatch=>{\r\n    return{\r\nonGet:(value)=>dispatch(actiontypes.getRequest(value))\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(serachMovieComponent);","import * as actionTypes from '../actions/actionTypes';\r\nimport axios from 'axios';\r\nexport const request=(value)=>{\r\n    return {\r\n        type:actionTypes.GETQUERY,\r\n        value: value\r\n    }\r\n}\r\n\r\n\r\nexport const getRequest=(value)=>{\r\n    return dispatch=>{\r\n        const url= `https://api.themoviedb.org/3/search/movie?api_key=1d547d0f978f704dad5f29a2cd73fe62&language=en-US&query=${value}&inculde_adult=false`;\r\n        axios.get(url)\r\n        .then(res=>{\r\n       \r\n            dispatch(request(res.data.results))\r\n        }).catch(err=>{\r\nconsole.log(err);\r\n\r\n        });\r\n        // try{\r\n        //     const res= await  fetch(url);\r\n        //     console.log(res);\r\n        //     const data = await res.json();\r\n        //     console.log(data.results);\r\n        //     dispatch(request(data.results));\r\n    \r\n        // }catch(err){\r\n        //     console.log(err);\r\n        // }\r\n    }\r\n}","export const GETQUERY='GETQUERY';","import React from 'react';\nimport SerachMovieComponent from './SerachMovieComponent.js';\nimport './App.css';\n\nfunction App() {\n  document.title=\"Movie Times\"\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Movie Times</h1>\n      <SerachMovieComponent />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initailState={\r\n    responce:[]\r\n}\r\n\r\nconst reducer=(state=initailState,action)=>{\r\n    switch(action.type){\r\n        case actionTypes.GETQUERY:\r\n            return{\r\n                responce:action.value\r\n\r\n            }\r\n            default:\r\n                return{\r\n                  responce:state.responce\r\n                }\r\n    }\r\n\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore ,applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './store/reducer/reducer.js';\nimport thunk from 'redux-thunk';\n\nconst store=createStore(reducer,applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}